// name "Assign functions to variables and pass as arguments"

fun add(x: Int, y: Int): Int { x + y };
var binary: (Int, Int) => Int = add;

fun get_five(): Int { 5 };
var constant: () => Int = get_five;

fun print(x: Int) { print_int(x); };
var consume: (Int) => Unit = print;

fun call(f: (Int) => Unit, x: Int) {
    f(x);
}
call(consume, binary(constant(), constant()));
// expect 10

//===

// name "Can pass builtin functions as values"

fun call(f: (Bool) => Unit, x: Bool) {
  f(x);
}
call(print_bool, true);
// expect 1

//===

// name "Can call a function returned by function"

fun action_1() {
  print_int(789);
}

fun action_2() {
  print_bool(true);
}

fun default_action() {
  action_1();
}

fun get_action(action_idx: Int): () => Unit {
  if action_idx == 1 then {
    return action_1;
  }
  if action_idx == 2 then {
    return action_2;
  }
  default_action
}

get_action(2)();
// expect 1

get_action(3)();
// expect 789

get_action(1)();
// expect 789
